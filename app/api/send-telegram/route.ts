import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, email, phone, serviceType, preferredDate, message } = body

    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    if (!botToken || !chatId) {
      return NextResponse.json({ error: "Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" }, { status: 500 })
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
üî• *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–¢–û–ü–õ–ï–ù–ò–ï*

üë§ *–ò–º—è:* ${name}
üìß *Email:* ${email}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
üîß *–£—Å–ª—É–≥–∞:* ${serviceType || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
üìÖ *–î–∞—Ç–∞:* ${preferredDate || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}

üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

‚è∞ *–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:* ${new Date().toLocaleString("ru-RU")}
    `.trim()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: telegramMessage,
        parse_mode: "Markdown",
      }),
    })

    if (!telegramResponse.ok) {
      const telegramError = await telegramResponse.text()
      console.error("Telegram API error:", telegramError)
      throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
    }

    return NextResponse.json({
      success: true,
      message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram",
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error)
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Telegram" }, { status: 500 })
  }
}
